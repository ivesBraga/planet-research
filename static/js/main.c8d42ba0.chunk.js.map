{"version":3,"sources":["context/Context.js","components/SearchFilters.jsx","components/SearchInput.jsx","components/Table.jsx","services/StarWarsAPI.js","context/Provider.js","App.js","index.js"],"names":["PlanetsContext","createContext","SearchFilters","useContext","Context","numberFilter","setNumberFilter","columnOptions","comparisonFilter","setComparisonFilter","saveFiltersSetup","setColumnValue","columnValue","saveFilters","deleteFilter","removeAllFilters","setOrder","originalColumnOptions","useState","selectColumnFilter","setSelectColumnFilter","inputOrder","setInputOrder","useEffect","console","log","className","data-testid","value","onChange","target","map","key","type","onClick","option","index","id","htmlFor","name","checked","colunm","sort","filtros","i","column","comparison","SearchInput","planetSearch","setPlanetSearch","placeholder","Table","planetsData","planets","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","getPlanets","a","fetch","response","json","data","results","Provider","children","originalPlanetsData","setOriginalPlanetsData","setPlanetsData","setSaveFilters","setColumnOptions","order","planetsOrder","unknown","filter","planet","sortedPlanets","planetA","planetB","Number","sortPlanets","length","planetsFilter","greaterNum","smallerNum","filterEqual","planetFilter","orderedPlanets","b","fetchData","filtredPlanets","toLowerCase","includes","contextValue","options","filtro","prevState","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8d42ba0.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","import React, { useContext, useEffect, useState } from 'react';\nimport Context from '../context/Context';\nimport '../css/SearchFilters.css';\n\nexport default function SearchFilters() {\n  const {\n    numberFilter,\n    setNumberFilter,\n    columnOptions,\n    comparisonFilter,\n    setComparisonFilter,\n    saveFiltersSetup,\n    setColumnValue,\n    columnValue,\n    saveFilters,\n    deleteFilter,\n    removeAllFilters,\n    setOrder,\n  } = useContext(Context);\n\n  const comparisonOptions = ['maior que', 'menor que', 'igual a'];\n  const originalColumnOptions = [\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water',\n  ];\n\n  const [selectColumnFilter, setSelectColumnFilter] = useState(originalColumnOptions[0]);\n  const [inputOrder, setInputOrder] = useState('');\n\n  useEffect(() => {\n    console.log(saveFilters);\n  }, [saveFilters]);\n\n  return (\n    <div className=\"filtros\">\n\n      <select\n        className=\"filtro\"\n        data-testid=\"column-filter\"\n        value={ columnValue }\n        onChange={ ({ target }) => setColumnValue(target.value) }\n      >\n        {columnOptions.map((value) => <option key={ value }>{value}</option>)}\n      </select>\n\n      <select\n        className=\"filtro\"\n        data-testid=\"comparison-filter\"\n        value={ comparisonFilter }\n        onChange={ ({ target }) => setComparisonFilter(target.value) }\n      >\n        {comparisonOptions.map((value) => <option key={ value }>{value}</option>)}\n      </select>\n\n      <input\n        className=\"filtro\"\n        type=\"number\"\n        data-testid=\"value-filter\"\n        value={ numberFilter }\n        onChange={ ({ target }) => setNumberFilter(target.value) }\n      />\n\n      <button\n        className=\"botao\"\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ saveFiltersSetup }\n      >\n        Filtrar!\n      </button>\n\n      <section>\n        <select\n          className=\"filtro\"\n          data-testid=\"column-sort\"\n          value={ selectColumnFilter }\n          onChange={ ({ target }) => setSelectColumnFilter(target.value) }\n        >\n          { originalColumnOptions.map((option, index) => (\n            <option\n              value={ option }\n              key={ index }\n              id={ option }\n            >\n              { option }\n            </option>\n          )) }\n        </select>\n      </section>\n\n      <section className=\"teste\">\n        <label htmlFor=\"AscInput\">\n          <span>Ascendente</span>\n          <input\n            name=\"ascDescSort\"\n            id=\"AscInput\"\n            value=\"ASC\"\n            type=\"radio\"\n            onChange={ ({ target }) => setInputOrder(target.value) }\n            data-testid=\"column-sort-input-asc\"\n          />\n        </label>\n        <label htmlFor=\"DescInput\">\n          <span>Descendente</span>\n          <input\n            name=\"ascDescSort\"\n            id=\"DescInput\"\n            value=\"DESC\"\n            type=\"radio\"\n            onChange={ ({ target }) => setInputOrder(target.value) }\n            data-testid=\"column-sort-input-desc\"\n            checked={ inputOrder === 'DESC' }\n          />\n        </label>\n      </section>\n\n      <button\n        className=\"botao\"\n        type=\"button\"\n        onClick={ () => {\n          console.log('foi');\n          setOrder({\n            colunm: selectColumnFilter, sort: inputOrder,\n          });\n        } }\n        data-testid=\"column-sort-button\"\n      >\n        Ordenar\n      </button>\n\n      <button\n        className=\"botao-remover\"\n        type=\"button\"\n        data-testid=\"button-remove-filters\"\n        onClick={ removeAllFilters }\n      >\n        Remover Filtros\n      </button>\n\n      {\n        saveFilters.map((filtros, i) => {\n          const { column, comparison, value } = filtros;\n          return (\n            <div key={ i } data-testid=\"filter\">\n\n              <span>\n                {\n                  `${column} || ${comparison} || ${value}`\n                }\n              </span>\n\n              <button\n                type=\"button\"\n                onClick={ () => deleteFilter(filtros) }\n              >\n                X\n              </button>\n\n            </div>\n          );\n        })\n      }\n\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\nimport '../css/SearchInput.css';\n\nexport default function SearchInput() {\n  const {\n    planetSearch,\n    setPlanetSearch } = useContext(Context);\n\n  // https://stackoverflow.com/questions/55757761/handle-an-input-with-react-hooks função onChange\n  // feito com ajuda de Iago Medeiros e Henrique Rubido\n\n  return (\n    <div>\n      <main className=\"header\">\n        <h1>Planet Research - Star Wars</h1>\n\n        <input\n          className=\"planet-name-input\"\n          placeholder=\"Search for a planet\"\n          data-testid=\"name-filter\"\n          onChange={ ({ target }) => setPlanetSearch(target.value) }\n          value={ planetSearch }\n        />\n      </main>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport Context from '../context/Context';\nimport 'bulma/css/bulma.min.css';\nimport '../css/Table.css';\n\nexport default function Table() {\n  const { planetsData } = useContext(Context);\n\n  return (\n    <div>\n      <table className=\"table\">\n        <thead>\n          <tr className=\"cabecalho-tabela\">\n            <th className=\"titulo\">Name</th>\n            <th className=\"titulo\">Rotation Period</th>\n            <th className=\"titulo\">Orbital Period</th>\n            <th className=\"titulo\">Diameter</th>\n            <th className=\"titulo\">Climate</th>\n            <th className=\"titulo\">Gravity</th>\n            <th className=\"titulo\">Terrain</th>\n            <th className=\"titulo\">Surface Water</th>\n            <th className=\"titulo\">Population</th>\n            <th className=\"titulo\">Films</th>\n            <th className=\"titulo\">Created</th>\n            <th className=\"titulo\">Edited</th>\n            <th className=\"titulo\">URL</th>\n          </tr>\n        </thead>\n        <tbody>\n          {planetsData && planetsData.map((planets) => (\n            <tr key={ planets.name } className=\"tabela\">\n              <td data-testid=\"planet-name\">{planets.name}</td>\n              <td>{planets.rotation_period}</td>\n              <td>{planets.orbital_period}</td>\n              <td>{planets.diameter}</td>\n              <td>{planets.climate}</td>\n              <td>{planets.gravity}</td>\n              <td>{planets.terrain}</td>\n              <td>{planets.surface_water}</td>\n              <td>{planets.population}</td>\n              <td>{planets.films}</td>\n              <td>{planets.created}</td>\n              <td>{planets.edited}</td>\n              <td>{planets.url}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","const endPoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nconst getPlanets = async () => {\n  const response = await fetch(endPoint);\n  const data = await response.json();\n  return data.results;\n};\n\nexport default getPlanets;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport PlanetsContext from './Context';\nimport getPlanets from '../services/StarWarsAPI';\n\nfunction Provider({ children }) {\n  // planetas e uma cópia\n  const [originalPlanetsData, setOriginalPlanetsData] = useState([]);\n  const [planetsData, setPlanetsData] = useState([]);\n\n  // input de pesquisa dinâmico\n  const [planetSearch, setPlanetSearch] = useState('');\n\n  // filtros\n  const [numberFilter, setNumberFilter] = useState(0);\n  const [columnValue, setColumnValue] = useState('population');\n  const [comparisonFilter, setComparisonFilter] = useState('maior que');\n\n  // salvando todos os filtros num local só\n\n  const [saveFilters, setSaveFilters] = useState([]);\n  const [columnOptions, setColumnOptions] = useState(['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water']);\n\n  const [order, setOrder] = useState({});\n\n  function removeColumnValue() {\n    setColumnOptions(columnOptions.filter((options) => options !== columnValue));\n    console.log(columnOptions);\n  }\n\n  const deleteFilter = (filtro) => {\n    setSaveFilters((prevState) => prevState.filter((filter) => filter !== filtro));\n    setPlanetsData(originalPlanetsData);\n  };\n\n  const removeAllFilters = () => {\n    setSaveFilters([]);\n  };\n\n  useEffect(() => {\n    setColumnValue(columnOptions[0]);\n  }, [columnOptions]);\n\n  function saveFiltersSetup() {\n    setSaveFilters([\n      ...saveFilters,\n      { column: columnValue, comparison: comparisonFilter, value: numberFilter },\n    ]);\n    removeColumnValue();\n  }\n\n  const planetFilter = () => {\n    if (saveFilters.length > 0) {\n      saveFilters.map((planetsFilter) => {\n        const { column, comparison, value } = planetsFilter;\n\n        if (comparison === 'maior que') {\n          const greaterNum = planetsData.filter(\n            (planet) => Number(planet[column]) > Number(value),\n          );\n          setPlanetsData(greaterNum);\n        } else if (comparison === 'menor que') {\n          const smallerNum = planetsData.filter(\n            (planet) => Number(planet[column]) < Number(value),\n          );\n          setPlanetsData(smallerNum);\n        } else {\n          const filterEqual = planetsData.filter(\n            (planet) => Number(planet[column]) === Number(value),\n          );\n          setPlanetsData(filterEqual);\n        }\n        return 'Error';\n      });\n    } else {\n      return setPlanetsData(originalPlanetsData);\n    }\n  };\n\n  const sortPlanets = () => {\n    const { colunm, sort } = order;\n\n    let planetsOrder = [];\n\n    if (order) {\n      const unknown = planetsData.filter((planet) => planet[colunm] === 'unknown');\n      const dontHaveUnknown = planetsData\n        .filter((planet) => planet[colunm] !== 'unknown');\n      const sortedPlanets = dontHaveUnknown.sort((planetA, planetB) => {\n        if (sort === 'ASC') {\n          return Number(planetA[colunm]) - Number(planetB[colunm]);\n        }\n        return Number(planetB[colunm]) - Number(planetA[colunm]);\n      });\n      planetsOrder = [...sortedPlanets, ...unknown];\n    }\n    return setPlanetsData(planetsOrder);\n  };\n\n  useEffect(() => {\n    sortPlanets();\n  }, [order]);\n\n  useEffect(() => {\n    planetFilter();\n  }, [saveFilters]);\n\n  // fetch dos planetas\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await getPlanets();\n      const orderedPlanets = data.sort((a, b) => {\n        const NEGATIVE_ONE = -1;\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return NEGATIVE_ONE;\n        }\n        return 0;\n      });\n      setPlanetsData(orderedPlanets);\n      setOriginalPlanetsData(data);\n    };\n    fetchData();\n  }, []);\n\n  // função pra mostrar os planetas dinamicamente\n  useEffect(() => {\n    const filtredPlanets = originalPlanetsData.filter(\n      (planet) => planet.name.toLowerCase().includes(planetSearch.toLowerCase()),\n    );\n    setPlanetsData(filtredPlanets);\n  }, [planetSearch]);\n\n  const contextValue = {\n    planetsData,\n    setPlanetsData,\n    planetSearch,\n    setPlanetSearch,\n    numberFilter,\n    setNumberFilter,\n    columnOptions,\n    setColumnOptions,\n    comparisonFilter,\n    setComparisonFilter,\n    saveFilters,\n    setSaveFilters,\n    saveFiltersSetup,\n    setColumnValue,\n    columnValue,\n    deleteFilter,\n    removeAllFilters,\n    setOrder,\n  };\n\n  return (\n    <PlanetsContext.Provider\n      value={ contextValue }\n    >\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: propTypes.objectOf(propTypes.any).isRequired,\n};\nexport default Provider;\n","import React from 'react';\nimport SearchFilters from './components/SearchFilters';\nimport SearchInput from './components/SearchInput';\nimport Table from './components/Table';\nimport Provider from './context/Provider';\n\nfunction App() {\n  return (\n    <Provider>\n      <SearchInput />\n      <SearchFilters />\n      <Table />\n    </Provider>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}